;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void I2C_Init()            /* I2C initialize function */
; 0002 0004 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0005 TWBR = BITRATE(TWSR=0x00);    /* Get bit rate register value by formula */
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0002 0006 }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;unsigned char I2C_Start_Wait(char write_address)
; 0002 0009 {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0002 000A unsigned char status;
; 0002 000B TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);     // Start_Enable_Interrupt
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;	write_address -> R16
;	status -> R17
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0002 000C while (!(TWCR & (1<<TWINT)));               // Doi den khi I2C thuc hien xong nh ...
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0002 000D status = TWCR & 0xF8;                       // Doc trang thai (5 bit cao)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 000E if (status != 0x08) return 0;               // Dieu kien bat dau khong thanh con ...
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0002 000F TWDR = write_address;                       // Ghi SLA+W vao thanh ghi du lieu
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0002 0010 TWCR = (1<<TWEN)|(1<<TWINT);                // Bat TWI, xoa co ngat
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0002 0011 while (!(TWCR & (1<<TWINT)));               // Doi den khi ket thuc qua trinh
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0002 0012 status = TWSR & 0xF8;                       // Doc trang thai
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0002 0013 if (status == 0x18) return 1;               // Da nhan duoc xac nhan tu slave
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0002 0014 if (status == 0x20) return 2;               // Khong nhan duoc xac nhan tu slave
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0002 0015 else return 3;                              // Truyen loi
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0002 0016 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;unsigned char I2C_Repeated_Start(char read_address) /* I2C repeated start functi ...
; 0002 0019 {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0002 001A unsigned char status;
; 0002 001B TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Start_Enable_Interrupt */
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;	read_address -> R16
;	status -> R17
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0002 001C while (!(TWCR & (1<<TWINT)));	        /* Doi */
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0002 001D status = TWSR & 0xF8;		            /* Doc trang thai */
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0002 001E if(status!=0x10) return 0;		        /* Kiem tra lap co loi hay khong */
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0002 001F TWDR = read_address;		            /* Write SLA+R in TWI data register */
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0002 0020 TWCR = (1<<TWEN)|(1<<TWINT);	        /* Enable TWI and clear interrupt flag */
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0002 0021 while (!(TWCR & (1<<TWINT)));	        /* Wait until TWI finish its current job * ...
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0002 0022 status = TWSR & 0xF8;		            /* Read TWI status register */
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0002 0023 if (status == 0x40) return 1;		    /* Co xac nhan tu slave */
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0002 0024 if (status == 0x48) return 2;	        /* Khong co xac nhan tra ve */
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0002 0025 else return 3;                          /* Truyen loi */
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0002 0026 }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;unsigned char I2C_Write(char data)	    /* I2C write function */
; 0002 0029 {
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0002 002A unsigned char status;
; 0002 002B TWDR = data;			            /* Copy data in TWI data register */
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;	data -> R16
;	status -> R17
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0002 002C TWCR = (1<<TWEN)|(1<<TWINT);	    /* Enable TWI and clear interrupt flag */
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0002 002D while (!(TWCR & (1<<TWINT)));	    /* Wait until TWI finish its current job */
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0002 002E status = TWSR & 0xF8;		        /* Read TWI status register */
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0002 002F if (status == 0x28)		            /* Check for data transmitted &ack received */
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0002 0030 return 0;			                /* Return 0 to indicate ack received */
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0002 0031 if (status == 0x30)		            /* Check for data transmitted & nack received * ...
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0002 0032 return 1;			                /* Return 1 to indicate nack received */
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0002 0033 else
;PCODE: $000000B7 VOL: 0
; 0002 0034 return 2;			                /* Else return 2 for data transmission failure */
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0002 0035 }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;char I2C_Read_Ack()		                        /* I2C read ack function */
; 0002 0038 {
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0002 0039 TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);        /* Enable TWI, generation of ack */
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0002 003A while(!(TWCR&(1<<TWINT)));	                /* Wait until TWI finish its current  ...
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0002 003B return TWDR;			                    /* Return received data */
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0002 003C }
;PCODE: $000000CB VOL: 0
;char I2C_Read_Nack()		    /* I2C read nack function */
; 0002 003F {
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0002 0040 TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0002 0041 while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0002 0042 return TWDR;		        /* Return received data */
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0002 0043 }
;PCODE: $000000D8 VOL: 0
;void I2C_Stop()			                        /* I2C stop function */
; 0002 0046 {
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0002 0047 TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);       /* Enable TWI, generate stop */
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0002 0048 while (TWCR & (1<<TWSTO));	                /* Wait until stop condition executio ...
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0002 0049 }
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;void I2C_Slave_Init(unsigned char slave_address)
; 0002 004C {
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0002 004D TWAR = slave_address;		            /* Assign Address in TWI address register */
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;	slave_address -> R17
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0002 004E TWCR = (1<<TWEN)|(1<<TWEA)|(1<<TWINT);  /* Enable TWI, Enable ack generation */
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0002 004F }
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;unsigned char I2C_Slave_Listen()
; 0002 0052 {
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0002 0053 while(1)
;PCODE: $000000F3 VOL: 0
; 0002 0054 {
; 0002 0055 unsigned char status;
; 0002 0056 while (!(TWCR & (1<<TWINT)));	    /* Wait to be addressed */
;PCODE: $000000F4 VOL: 0
;	status -> Y+0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0002 0057 status = TWSR & 0xF8;		        /* Read TWI status register */
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0002 0058 if(status==0x60||status==0x68)	    /* Own SLA+W received & ack returned */
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0002 0059 return 0;			                /* Return 0 to indicate ack returned */
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0002 005A if(status==0xA8||status==0xB0)	    /* Own SLA+R received & ack returned */
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0002 005B return 1;			                /* Return 1 to indicate ack returned */
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0002 005C if(status==0x70||status==0x78)  	/* General call received & ack returned */
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0002 005D return 2;			                /* Return 2 to indicate ack returned */
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0002 005E else continue;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0002 005F }
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0002 0060 }
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;unsigned char I2C_Slave_Transmit(char data)
; 0002 0063 {
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0002 0064 unsigned char status;
; 0002 0065 TWDR = data;			                /* Write data to TWDR to be transmitted */
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;	data -> R16
;	status -> R17
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0002 0066 TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);  /* Enable TWI & clear interrupt flag */
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0002 0067 while (!(TWCR & (1<<TWINT)));	        /* Wait until TWI finish its current job * ...
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0002 0068 status = TWSR & 0xF8;		            /* Read TWI status register */
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0002 0069 if(status == 0xA0)		                /* Check for STOP/REPEATED START received */
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0002 006A {
; 0002 006B TWCR|=(1<<TWINT);	                /* Clear interrupt flag & return -1 */
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0002 006C return -1;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0002 006D }
; 0002 006E if (status == 0xB8)		                /* Check for data transmitted & ack receive ...
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0002 006F return 0;			                /* If yes then return 0 */
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0002 0070 if (status == 0xC0)		                /* Check for data transmitted & nack receiv ...
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0002 0071 {
; 0002 0072 TWCR |= (1<<TWINT);	                /* Clear interrupt flag & return -2 */
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0002 0073 return -2;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0002 0074 }
; 0002 0075 if (status == 0xC8)	                	/* Last byte transmitted with ack received  ...
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0002 0076 return -3;		                	/* If yes then return -3 */
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0002 0077 else return -4;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0002 0078 }
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;char I2C_Slave_Receive()
; 0002 007B {
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0002 007C unsigned char status;
; 0002 007D TWCR = (1<<TWEN)|(1<<TWEA)|(1<<TWINT);  /* Enable TWI & generation of ack */
;PCODE: $00000167 VOL: 0
;	status -> R17
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0002 007E while (!(TWCR & (1<<TWINT)));       	/* Wait until TWI finish its current job */
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0002 007F status = TWSR & 0xF8;		            /* Read TWI status register */
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0002 0080 if (status==0x80||status==0x90)         /* Check for data received & ack returne ...
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0002 0081 return TWDR;	                    	/* If yes then return received data */
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0002 0082 
; 0002 0083 /* Check for data received, nack returned & switched to not addressed slave mode ...
; 0002 0084 if (status==0x88||status==0x98)
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0002 0085 return TWDR;	                    	/* If yes then return received data */
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0002 0086 if (status==0xA0)           	    	/* Check wether STOP/REPEATED START */
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0002 0087 {
; 0002 0088 TWCR|=(1<<TWINT);               	/* Clear interrupt flag & return -1 */
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0002 0089 return -1;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0002 008A }
; 0002 008B else return -2;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0002 008C }
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
